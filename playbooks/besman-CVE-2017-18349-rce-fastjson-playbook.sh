#!/bin/bash

function __besman_check_requirements
{
    local requirements
    requirements=("java" "mvn")

    for i in $requirements
    do
        if [[ -z $(which $i) ]]; then
            __besman_echo_red "$i not found"
            return 1
        fi
    done
}

function __besman_download_payload
{
    local payload_url payload
    payload_url=https://github.com/Be-Secure-Google-POC/fastjson
    git clone $payload_url $HOME/payload

}

function __besman_check_payload_exist
{
    local payload
    payload=$HOME/payload

    if [[ ! -d "$payload" ]]; then
        __besman_download_payload
        cd $payload
        git checkout v1.2.24-BeSp2 &> $HOME/fastjson_test.out
        [[ ! -f $payload/src/test/java/com/alibaba/json/bvt/bes_exploit_testCase/ExploitTestCase.java ]] && __besman_echo_red "Could not find exploit test case" && return 1
        cd $HOME
    else
        return 0
    fi
}

function __besman_check_fastjson_exist
{
    local fastjson_dir
    fastjson_dir=$1

    if [[ ! -d $fastjson_dir ]]; then
        __besman_echo_red "Could not find fastjson"
        return 1
    else
        return 0
    fi
   
}

function __besman_execute_exploit
{
    echo "Performing exploit..."
    local payload_dir fastjson_dir
    payload_dir=$HOME/payload
    fastjson_dir=$1
    cd $payload_dir
    git checkout v1.2.24-BeSp2 &> $HOME/fastjson_test.out
    cd $fastjson_dir
    git checkout tags/1.2.24 -b branch_1.2.24 2> $HOME/fastjson_test.out
    cp -r $payload_dir/src/test/java/com/alibaba/json/bvt/bes_exploit_testCase $fastjson_dir/src/test/java/com/alibaba/json/bvt/
    mvn test -Dtest="ExploitTestCase" --log-file $HOME/fastjson_test.out
    cd $HOME
    
}

function __besman_assess_result
{
    if cat $HOME/fastjson_test.out | grep -q "Exploit Failed"
    then
        return 1
    else
        return 0
    fi
}

function __besman_usage
{
    cat <<EOF

Usage: ./besman-CVE-2017-18349-rce-fastjson-playbook.sh <fastjson_dir_path>

EOF
}

function __besman_write_log
{
    local result_val result vuln environment 
    result_val=$1
    environment=$(cat $BESMAN_DIR/var/current)
    if [[ $result_val -eq 1 ]]; then
        __besman_echo_yellow_highlight "Exploit failed. Vulnerability not found"
        result="exploit failed"
        vuln="does not exist"
    else
        __besman_echo_yellow_highlight "Exploit success. Vulnerability found"
        result="exploit success"
        vuln="exist"
    fi
cat <<EOF >$HOME/besman-CVE-2017-18349-fastjson.json
{
    "playbook": "besman-CVE-2017-18349-fastjson-playbook.sh",
    "ossp": "fastjson",
    "execution": "automated",
    "type": "shell",
    "cve": "CVE-2017-18349",
    "last_run": "$(date)",
    "hostname": "$(hostname)",
    "environment": "$environment",
    "result": "$result",
    "vulnerability": "$vuln",
    "test_cases": [
        "com.alibaba.json.bvt.bes_exploit_testCase.ExploitTestCase"
        ],
    "tests_run": 1,
    "failures": 0,
    "errors": 0,
    "skipped": 0
}

EOF

__besman_echo_white "Please find the playbook execution report at $HOME/besman-CVE-2017-18349-fastjson.json"
   
}
function __besman_cleanup
{
    [[ -f $HOME/fastjson_test.out ]] && rm $HOME/fastjson_test.out
}

function __besman_playbook_run
{
    local fastjson_dir=$1
    local return_val=0
    [[ -z $fastjson_dir ]] && __besman_usage && return 1
    __besman_check_requirements
    [[ "$?" -eq 1 ]] && return 1

    __besman_check_fastjson_exist "$fastjson_dir"
    [[ "$?" -eq 1 ]] && return 1

    __besman_check_payload_exist || return 1
    __besman_execute_exploit $fastjson_dir
    __besman_assess_result 
    if [[ "$?" -eq 1 ]]; then
        return_val=1
    else
        return_val=0
    fi
    __besman_write_log "$return_val" 

    __besman_cleanup

}

__besman_playbook_run "$HOME/fastjson"
